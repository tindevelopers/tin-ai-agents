
import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'nodejs';

interface ImageSuggestion {
  type: 'featured' | 'body';
  prompt: string;
  description: string;
  placement?: string; // For body images - where to place them
  altText: string;
  aspectRatio: string;
  imageTitle: string;
  imageSlug: string;
}

interface ImageSet {
  image_prompt: string;
  placement_suggestion: string;
  image_title: string;
  image_slug: string;
  alt_text: string;
  aspect_ratio: string;
  type: 'featured' | 'body';
}

// Advanced AI prompt for generating natural, realistic image suggestions
const ADVANCED_IMAGE_ANALYSIS_PROMPT = `You are an expert AI assistant tasked with generating comprehensive image asset information for a blog post. You will receive a blog post with title, content, and keywords as input. Your goal is to analyze the content and create 2 to 3 distinct "image sets".

Each "image set" should complement a specific part of the article and include detailed specifications for natural, realistic imagery.

## CRITICAL REALISM GUIDELINES - ALWAYS INCLUDE:

### Essential Realism Modifiers (Include in ALL prompts):
- "Natural lighting, shot with DSLR camera"
- "Documentary photography style" 
- "Authentic candid moment"
- "Slightly imperfect realistic details"
- "Unposed natural expressions"
- "Photojournalistic style"

### Style Specifications:
- Use: "handheld camera feel," "natural depth of field," "ambient lighting," "everyday setting"
- Avoid: "perfect," "flawless," "studio lighting," "highly detailed," "pristine"
- Include: "slight motion blur," "natural shadows," "lived-in space," "realistic wear and tear"

### Composition Guidelines:
- Specify: "eye-level shot," "slightly off-center composition," "natural depth of field"
- Include environmental context: "working environment," "authentic interactions," "genuine expressions"

## IMAGE REQUIREMENTS:

### Featured Image (16:9 landscape):
Create ONE featured image that represents the main topic with these specifications:
- Aspect ratio: 16:9 landscape
- Purpose: Blog header/social sharing
- Style: Professional yet natural, documentary feel
- Composition: Eye-catching but authentic

### Body Images (2 images, 4:3 or 1:1):
Create TWO supporting body images:
- Aspect ratio: 4:3 or 1:1 (specify which)
- Purpose: Support specific content sections
- Style: Complementary to featured image
- Placement: Strategic within article flow

## PROMPT STRUCTURE TEMPLATE:
"[Main subject and action], natural lighting, shot with DSLR camera, documentary photography style, authentic candid moment, [specific setting details], slightly imperfect realistic details, unposed natural expressions, [mood/atmosphere], handheld camera feel with natural depth of field, photojournalistic style"

## OUTPUT FORMAT:
Return a JSON object with exactly this structure:
{
  "image_sets": [
    {
      "image_prompt": "[Detailed realistic prompt following guidelines above]",
      "placement_suggestion": "[Specific placement in article - 'featured-header' or 'after-section-X' or 'mid-article']",
      "image_title": "[Short, catchy, relevant title]",
      "image_slug": "[lowercase-hyphenated-url-friendly]",
      "alt_text": "[Descriptive, SEO-friendly, accessibility-focused]",
      "aspect_ratio": "[16:9, 4:3, or 1:1]",
      "type": "[featured or body]"
    }
  ]
}

## CONTENT ANALYSIS INSTRUCTIONS:
1. Read the blog title, content, and keywords carefully
2. Identify the main theme and 2-3 key concepts that need visual support
3. Create image prompts that feel natural and authentic, not AI-generated
4. Ensure each image serves a specific purpose in supporting the content
5. Vary the compositions and settings while maintaining consistency

Focus on creating images that look like they were taken by a professional photographer in real-world settings, not generated by AI.`;

export async function POST(request: NextRequest) {
  try {
    const { title, content, keywords } = await request.json();

    console.log('üé® Generating advanced image suggestions for:', { title, keywords: keywords?.length });

    if (!title?.trim()) {
      return NextResponse.json(
        { error: 'Title is required for image generation' },
        { status: 400 }
      );
    }

    // Prepare content for AI analysis
    const contentForAnalysis = {
      title,
      content: content || 'No content provided - generate based on title and keywords',
      keywords: keywords || []
    };

    // Create the analysis prompt with the blog data
    const analysisPrompt = `${ADVANCED_IMAGE_ANALYSIS_PROMPT}

## BLOG POST DATA TO ANALYZE:

**Title:** ${contentForAnalysis.title}

**Keywords:** ${contentForAnalysis.keywords.join(', ') || 'None provided'}

**Content:** 
${contentForAnalysis.content}

---

Now generate 3 image sets (1 featured + 2 body images) following the guidelines above. Focus on creating natural, realistic, documentary-style photography prompts that avoid the typical "AI-generated" look.`;

    try {
      // Call the LLM to generate sophisticated image suggestions
      const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/ai/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: analysisPrompt,
          maxTokens: 2000,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`AI generation failed: ${response.statusText}`);
      }

      const aiResult = await response.json();
      
      // Parse the AI response to extract image sets
      let imageSets: ImageSet[] = [];
      try {
        const parsedResponse = JSON.parse(aiResult.content || aiResult.text || '{}');
        imageSets = parsedResponse.image_sets || [];
      } catch (parseError) {
        console.error('Failed to parse AI response, falling back to basic generation:', parseError);
        // Fallback to basic generation if AI parsing fails
        imageSets = generateBasicImageSets(title, content, keywords);
      }

      // Convert ImageSets to ImageSuggestions format for compatibility
      const imageSuggestions: ImageSuggestion[] = imageSets.map((imageSet, index) => ({
        type: imageSet.type as 'featured' | 'body',
        prompt: imageSet.image_prompt,
        description: imageSet.image_title,
        placement: imageSet.placement_suggestion,
        altText: imageSet.alt_text,
        aspectRatio: imageSet.aspect_ratio,
        imageTitle: imageSet.image_title,
        imageSlug: imageSet.image_slug,
      }));

      console.log('‚úÖ Generated advanced image suggestions:', imageSuggestions.length);

      return NextResponse.json({
        success: true,
        images: imageSuggestions,
        totalImages: imageSuggestions.length,
        advancedGeneration: true,
      });

    } catch (aiError) {
      console.error('AI image generation failed, falling back to basic generation:', aiError);
      
      // Fallback to basic image generation
      const basicImageSets = generateBasicImageSets(title, content, keywords);
      const imageSuggestions: ImageSuggestion[] = basicImageSets.map((imageSet) => ({
        type: imageSet.type as 'featured' | 'body',
        prompt: imageSet.image_prompt,
        description: imageSet.image_title,
        placement: imageSet.placement_suggestion,
        altText: imageSet.alt_text,
        aspectRatio: imageSet.aspect_ratio,
        imageTitle: imageSet.image_title,
        imageSlug: imageSet.image_slug,
      }));

      return NextResponse.json({
        success: true,
        images: imageSuggestions,
        totalImages: imageSuggestions.length,
        advancedGeneration: false,
        fallback: true,
      });
    }

  } catch (error) {
    console.error('‚ùå Image generation error:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Failed to generate image suggestions',
      details: error instanceof Error ? error.message : 'Unknown error',
      images: [],
    });
  }
}

// Fallback function for basic image generation when AI fails
function generateBasicImageSets(title: string, content?: string, keywords?: string[]): ImageSet[] {
  const titleSlug = title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
  const topicKeywords = keywords?.slice(0, 3) || ['topic'];
  
  const imageSets: ImageSet[] = [
    {
      image_prompt: `${title} concept, natural lighting, shot with DSLR camera, documentary photography style, authentic candid moment, professional workspace setting, slightly imperfect realistic details, unposed natural expressions, focused atmosphere, handheld camera feel with natural depth of field, photojournalistic style`,
      placement_suggestion: 'featured-header',
      image_title: `${title} - Main Visual`,
      image_slug: `${titleSlug}-featured`,
      alt_text: `Professional photo illustrating ${title}`,
      aspect_ratio: '16:9',
      type: 'featured',
    },
    {
      image_prompt: `Person working on ${topicKeywords[0]} task, natural lighting, shot with DSLR camera, documentary photography style, authentic candid moment, home office environment, slightly imperfect realistic details, unposed natural expressions, concentrated mood, handheld camera feel with natural depth of field, photojournalistic style`,
      placement_suggestion: 'mid-article',
      image_title: `${topicKeywords[0]} in Action`,
      image_slug: `${titleSlug}-action-1`,
      alt_text: `Person working with ${topicKeywords[0]} in natural setting`,
      aspect_ratio: '4:3',
      type: 'body',
    },
    {
      image_prompt: `Close-up of hands working with ${topicKeywords[1] || 'materials'}, natural lighting, shot with DSLR camera, documentary photography style, authentic candid moment, real workspace with tools, slightly imperfect realistic details, unposed natural hand position, detailed texture, handheld camera feel with natural depth of field, photojournalistic style`,
      placement_suggestion: 'after-section-2',
      image_title: `${topicKeywords[1] || 'Details'} Close-up`,
      image_slug: `${titleSlug}-details`,
      alt_text: `Close-up detail shot showing ${topicKeywords[1] || 'key elements'}`,
      aspect_ratio: '1:1',
      type: 'body',
    },
  ];

  return imageSets;
}

// Helper function to extract key concepts from text
function extractKeywords(text: string): string[] {
  // Simple keyword extraction - in production, you might use NLP libraries
  const stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'must', 'can', 'shall', 'this', 'that', 'these', 'those'];
  
  const words = text.toLowerCase()
    .replace(/[^\w\s]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 3 && !stopWords.includes(word));
  
  // Count word frequency
  const wordCount: { [key: string]: number } = {};
  words.forEach(word => {
    wordCount[word] = (wordCount[word] || 0) + 1;
  });
  
  // Return top 3 most frequent words
  return Object.entries(wordCount)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3)
    .map(([word]) => word);
}
